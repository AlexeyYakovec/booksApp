/*	
	–ó–∞–ø—Ä–æ—Å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ (—á–∏—Å–ª–æ –∫–Ω–∏–≥), –≤ –ø–æ–∏—Å–∫–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ offset, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
	üëâ list - —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
	üëâ loading - –∑–∞–≥—Ä—É–∑–∫–∞
	üëâ searchQuery - –∑–∞–ø—Ä–æ—Å, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é undefied
	üëâ offset - 

	üëâ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —Å–≤–µ—Ä—Ö—É-–≤–Ω–∏–∑ (—Ç–æ –µ—Å—Ç—å —É –Ω–∞—à–∏—Ö favorites –¥–æ–ª–∂–Ω—ã –∑–Ω–∞—Ç—å —Å–æ–æ—Ç–≤. —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ) –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è main —ç—Ç–æ –≤–∞–∂–Ω–æ, 
	–ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å —ç—Ç–æ—Ç favorites –æ–±–Ω–æ–≤–ª—è—Ç—å
*/

import { AbstractView } from "../../common/view.js";
import onChange from "on-change";
import { Header } from "../../components/header/header.js";
import { Search } from "../../components/search/search.js";

export class MainView extends AbstractView {
   state = {
      list: [],
      loading: false,
      searchQuery: undefined,
      offset: 0,
   };

   constructor(appState) {
      super();
      this.appState = appState;
      this.appState = onChange(this.appState, this.appStateHook.bind(this));
      this.state = onChange(this.state, this.stateHook.bind(this));
      this.setTitle("Search books");
   }

   appStateHook(path) {
      if (path == "favorites") {
         console.log(path);
      }
   }

   async stateHook(path) {
      if (path == "searchQuery") {
         this.state.loading = true;
         const data = await this.loadList(
            this.state.searchQuery,
            this.state.offset
         );
         this.state.loading = false;
         this.state.list = data.docs;
         console.log(this.state.list);
      }
   }

   async loadList(q, offset) {
      const res = await fetch(
         `https://openlibrary.org/search.json?q=${q}&offset=${offset}`
      );
      return res.json();
   }

   render() {
      const main = document.createElement("div");
      main.append(new Search(this.state).render());
      this.app.innerHTML = "";
      this.app.append(main);
      this.renderHeader();
   }

   renderHeader() {
      const header = new Header(this.appState).render();
      this.app.prepend(header);
   }
}
